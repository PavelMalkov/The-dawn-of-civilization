using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.EventSystems;

[AddComponentMenu("Camera-Control/CameraZoom")]

public class CameraZoom : MonoBehaviour
{
    Vector3 touch;

    float speedzoom = 5;
    public float maxzoom = 5.4f;
    public float minzoom = 3;

    private float minX, maxX, minY, maxY;

    private float zoomSensitivity = 10.0f;
    private float zoom;

    void Start()
    {
        zoom = GetComponent<Camera>().orthographicSize;
    }

    void Update()
    {
        if (IsPointerOverUIObject())
        {
            // Zoom
            zoom -= Input.GetAxis("Mouse ScrollWheel") * zoomSensitivity;
            zoom = Mathf.Clamp(zoom, minzoom, maxzoom);

            if (Input.touchCount == 2)
            {
                Touch touchZero = Input.GetTouch(0);
                Touch touchOne = Input.GetTouch(1);

                Vector3 touchZeroLastPos = touchZero.position - touchZero.deltaPosition;
                Vector3 touchOneLastPos = touchOne.position - touchOne.deltaPosition;

                float disTouch = (touchZeroLastPos - touchOneLastPos).magnitude;
                float currentDistTouch = (touchZero.position - touchOne.position).magnitude;

                float difference = currentDistTouch - disTouch;

                ChancheZoom(difference * 0.01f);
            }
            // Scroll
            else if(Input.GetMouseButton(0))
            {
                touch = Camera.main.ScreenToWorldPoint(Input.mousePosition);
                // Card limit
                CalcMinMax();
                transform.position = new Vector3(Mathf.Clamp(transform.position.x, minX, maxX), Mathf.Clamp(transform.position.y, minY, maxY), -20f);
            }

        }
    }

    void LateUpdate()
    {
        GetComponent<Camera>().orthographicSize = Mathf.Lerp(GetComponent<Camera>().orthographicSize, zoom, Time.deltaTime * speedzoom);
    }

    void ChancheZoom(float increment)
    {
        Camera.main.orthographicSize = Mathf.Clamp(Camera.main.orthographicSize - increment, minzoom, maxzoom);
    }

    void CalcMinMax()// здесс остановилс€
    {
        maxX = (maxzoom - zoom)  * 720 / 1280; //(maxzoom - Camera.main.orthographicSize);
        minX = -maxX;

        maxY = (1 + maxzoom - zoom);
        minY = (zoom - maxzoom - 1);
    }

    //When Touching UI
    // проверка активного места нажати€
    private bool IsPointerOverUIObject()
    {
        PointerEventData eventDataCurrentPosition = new PointerEventData(EventSystem.current);
        eventDataCurrentPosition.position = new Vector2(Input.mousePosition.x, Input.mousePosition.y);
        List<RaycastResult> results = new List<RaycastResult>();
        EventSystem.current.RaycastAll(eventDataCurrentPosition, results);
        return results.Count == 0;
    }

    // проверка по координатам
    private bool IsPointerOverUIObject(float x, float y)
    {
        PointerEventData eventDataCurrentPosition = new PointerEventData(EventSystem.current);
        eventDataCurrentPosition.position = new Vector2(x, y);
        List<RaycastResult> results = new List<RaycastResult>();
        EventSystem.current.RaycastAll(eventDataCurrentPosition, results);
        return results.Count == 0;
    }
}


using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class PanelCreate : MonoBehaviour
{
    private bool ClouseFlag = true; // Ёто параметр впервый ли раз запускаетс€ игра

    // дублирующийс€ префаб
    [SerializeField]
    public RectTransform prefab;
    [SerializeField]
    public RectTransform content;

    [SerializeField]
    List<GameObject> BildOnScreen = new List<GameObject>();
    [SerializeField]
    List<int> Pos = new List<int>();

    private List<GameObject> BildGameObjects = new List<GameObject>();

    private void OnApplicationPause() // Ёто нужно если игрок свернул игру
    {
        if (ClouseFlag)
        {
            ClouseFlag = false;
        }
        else ChancheActive();
    }

    private void Start()
    {

    }

    /*
    private void GenerateBlock(string Name)
    {
        int i = 0;
        // генераци€ блоков
        foreach (var gameObject in BildOnScreen)
        {
            var instance = GameObject.Instantiate(prefab.gameObject) as GameObject;

            //print(NameObject + "---------------------");
            if (Name == "Constraction") // это окно строительства
            {
                BildView bildView = instance.GetComponent<BildView>();
                bildView.Id = Pos[i];
                bildView.BildMain = gameObject;
            }
            else if (Name == "Boost") // это окно ускорени€ производства
            {
                BoostView bildBoost = instance.GetComponent<BoostView>();
                bildBoost.Id = Pos[i];
                bildBoost.IdBoost = Pos[i];
                bildBoost.IdParams = 0;
            }
            instance.transform.SetParent(content, false); // устанавлиеваем его дочерним
            instance.SetActive(true); // отрисовка объектов которые подход€т
            BildGameObjects.Add(instance);
            i++;
        }
    }*/

    // размеры объекта в зависимости наход€щихс€ на нем объектов (купленных)
    public void ChancheActive()
    {
        int i = 0;
        if (this.name == "Constraction")
        {
            /*foreach (var gameObject in BildGameObjects)
            {
                if (i <= Currency.BildCount)
                {
                    gameObject.SetActive(true);
                }
                else gameObject.SetActive(false);
                i++;
            }*/
            gameObject.SetActive(true);
        }
        else if (this.name == "Boost")
        {
            i = 1;
            foreach (var gameObject in BildGameObjects)
            {
                gameObject.SetActive(true);
            }
            foreach (var gameObject in BildGameObjects)
            {
                if (gameObject.GetComponent<BoostView>().CanYouBay) gameObject.SetActive(true);
                else gameObject.SetActive(false);
                i++;
            }
        }
        print("ChancheActive");
    }
}

            switch (State)
            {
                case 0:
                    Debug.Log("»сследование здани€");
                    SaveControl.SetBildSetting(IdBild,true); // устанавливаем воможность покупки зданий
                    break;
                case 1:
                    Debug.Log("Ѕонусы дл€ здани€");
                    // нужно сделать
                    break;
                default:
                    Debug.Log("Ќичего");
                    break;
            }